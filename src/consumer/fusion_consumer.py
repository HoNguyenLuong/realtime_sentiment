import os
import time
import json
from kafka import KafkaConsumer
from src.utils.fusion_utils import run_fusion_analysis
from src.producer.config import CONFIG
import traceback

# Kafka topics ƒë·ªÉ l·∫Øng nghe
COMMENT_TOPIC = "video_comments"
VIDEO_TOPIC = "video_frames"
AUDIO_TOPIC = "audio_stream"

# Cache theo d√µi d·ªØ li·ªáu theo URL/video_id
video_data_tracking = {}

# C·∫•u tr√∫c d·ªØ li·ªáu cho m·ªói video_id:
# {
#    "video_id": {
#        "video_complete": False,
#        "audio_complete": False,
#        "video_frames": 0,
#        "audio_chunks": 0,
#        "comments": 0,
#        "last_update": timestamp
#    }
# }

# Th·ªùi gian t·ªëi ƒëa (gi√¢y) ƒë·ªÉ ƒë·ª£i d·ªØ li·ªáu m·ªõi tr∆∞·ªõc khi coi l√† ho√†n th√†nh
MAX_WAIT_TIME = 300  # 2 ph√∫t
# Th·ªùi gian ƒë·ªãnh k·ª≥ d·ªçn d·∫πp d·ªØ li·ªáu c≈© (gi√¢y)
CLEANUP_INTERVAL = 420  # 5 ph√∫t


def check_completed_videos():
    """Ki·ªÉm tra video n√†o ƒë√£ ho√†n th√†nh x·ª≠ l√Ω c·∫£ video v√† audio"""
    current_time = time.time()
    completed_videos = []

    # Thi·∫øt l·∫≠p ng∆∞·ª°ng s·ªë l∆∞·ª£ng t·ªëi thi·ªÉu cho m·ªói lo·∫°i d·ªØ li·ªáu
    MIN_VIDEO_FRAMES = 5  # S·ªë l∆∞·ª£ng frame t·ªëi thi·ªÉu
    MIN_AUDIO_CHUNKS = 1  # S·ªë l∆∞·ª£ng audio chunk t·ªëi thi·ªÉu
    MIN_COMMENTS = 0  # S·ªë l∆∞·ª£ng comment t·ªëi thi·ªÉu (c√≥ th·ªÉ 0 n·∫øu video kh√¥ng c√≥ comment)

    for video_id, data in list(video_data_tracking.items()):
        time_since_update = current_time - data["last_update"]

        # ƒêi·ªÅu ki·ªán ho√†n th√†nh:
        # 1. D·ªØ li·ªáu video ƒë√£ ƒë√°nh d·∫•u ho√†n th√†nh HO·∫∂C nh·∫≠n ƒë·ªß s·ªë l∆∞·ª£ng frame t·ªëi thi·ªÉu
        # 2. D·ªØ li·ªáu audio ƒë√£ ƒë√°nh d·∫•u ho√†n th√†nh HO·∫∂C nh·∫≠n ƒë·ªß s·ªë l∆∞·ª£ng chunk t·ªëi thi·ªÉu
        # 3. ƒê√£ nh·∫≠n ƒë·ªß s·ªë l∆∞·ª£ng comment t·ªëi thi·ªÉu
        # 4. Th·ªùi gian t·ª´ l·∫ßn c·∫≠p nh·∫≠t cu·ªëi c√πng v∆∞·ª£t qu√° ng∆∞·ª°ng ƒë·ª£i

        video_condition = data["video_complete"] or (data["video_frames"] >= MIN_VIDEO_FRAMES)
        audio_condition = data["audio_complete"] or (data["audio_chunks"] >= MIN_AUDIO_CHUNKS)
        comment_condition = data["comments"] >= MIN_COMMENTS
        timeout_condition = time_since_update > MAX_WAIT_TIME

        # M·ªôt video ch·ªâ ƒë∆∞·ª£c coi l√† ho√†n th√†nh khi ƒë√£ nh·∫≠n ƒë·ªß d·ªØ li·ªáu t·ª´ c·∫£ 3 ngu·ªìn ho·∫∑c h·∫øt th·ªùi gian ƒë·ª£i
        if (video_condition and audio_condition and comment_condition) or timeout_condition:
            # Log tr·∫°ng th√°i
            if timeout_condition and not (video_condition and audio_condition and comment_condition):
                print(f"‚è±Ô∏è ƒê√£ h·∫øt th·ªùi gian ƒë·ª£i cho video_id: {video_id} ({time_since_update:.1f}s)")
                if not video_condition:
                    print(f"‚ö†Ô∏è Video stream ch∆∞a ƒë·ªß d·ªØ li·ªáu cho video_id: {video_id} ({data['video_frames']} frames)")
                if not audio_condition:
                    print(f"‚ö†Ô∏è Audio stream ch∆∞a ƒë·ªß d·ªØ li·ªáu cho video_id: {video_id} ({data['audio_chunks']} chunks)")
                if not comment_condition:
                    print(f"‚ö†Ô∏è Ch∆∞a ƒë·ªß comments cho video_id: {video_id} ({data['comments']} comments)")
            else:
                print(
                    f"‚úÖ ƒê√£ nh·∫≠n ƒë·ªß d·ªØ li·ªáu cho video_id: {video_id} (V:{data['video_frames']}, A:{data['audio_chunks']}, C:{data['comments']})")

            completed_videos.append(video_id)

    return completed_videos


def process_message(message):
    """X·ª≠ l√Ω message t·ª´ Kafka v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i theo video_id"""
    try:
        # Parse n·ªôi dung message
        data = json.loads(message.value)

        # ∆Øu ti√™n l·∫•y url_id, n·∫øu kh√¥ng c√≥ th√¨ l·∫•y video_id
        video_id = data.get("url_id") or data.get("video_id") or data.get("content_id")

        if not video_id:
            print(f"‚ö†Ô∏è Message kh√¥ng c√≥ video identifier (topic: {message.topic}), b·ªè qua")
            return None

        # Kh·ªüi t·∫°o tracking cho video m·ªõi
        if video_id not in video_data_tracking:
            video_data_tracking[video_id] = {
                "video_complete": False,
                "audio_complete": False,
                "video_frames": 0,
                "audio_chunks": 0,
                "comments": 0,
                "last_update": time.time()
            }

        # C·∫≠p nh·∫≠t b·ªô ƒë·∫øm v√† tr·∫°ng th√°i theo lo·∫°i message
        video_data = video_data_tracking[video_id]
        video_data["last_update"] = time.time()

        if message.topic == VIDEO_TOPIC:
            video_data["video_frames"] += 1
            # Ki·ªÉm tra n·∫øu ƒë√¢y l√† frame cu·ªëi c√πng
            if data.get("is_last_frame", False):
                video_data["video_complete"] = True
                print(f"‚úÖ Ho√†n th√†nh video stream cho video_id: {video_id} ({video_data['video_frames']} frames)")

        elif message.topic == AUDIO_TOPIC:
            video_data["audio_chunks"] += 1
            # Ki·ªÉm tra n·∫øu ƒë√¢y l√† audio chunk cu·ªëi c√πng
            if data.get("is_last_chunk", False):
                video_data["audio_complete"] = True
                print(f"‚úÖ Ho√†n th√†nh audio stream cho video_id: {video_id} ({video_data['audio_chunks']} chunks)")

        elif message.topic == COMMENT_TOPIC:
            video_data["comments"] += 1
            # Log m·ªói 10 comments
            if video_data["comments"] % 10 == 0:
                print(f"üìù ƒê√£ nh·∫≠n {video_data['comments']} comments cho video_id: {video_id}")

        return video_id

    except json.JSONDecodeError:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ parse JSON t·ª´ message: {message.value}")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω message: {str(e)}")
        traceback.print_exc()
        return None


def run_fusion_for_video(video_id):
    """Ch·∫°y fusion analysis cho m·ªôt video_id c·ª• th·ªÉ"""
    if video_id not in video_data_tracking:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu tracking cho video_id: {video_id}")
        return

    data = video_data_tracking[video_id]
    print(f"üîÑ Ch·∫°y fusion analysis cho video_id {video_id}:")
    print(f"   - Video frames: {data['video_frames']}")
    print(f"   - Audio chunks: {data['audio_chunks']}")
    print(f"   - Comments: {data['comments']}")

    # Ki·ªÉm tra xem c√≥ ƒë·ªß d·ªØ li·ªáu t·ª´ m·ªói ngu·ªìn kh√¥ng
    if data['video_frames'] == 0:
        print(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu video cho video_id: {video_id}, b·ªè qua fusion analysis")
        return

    if data['audio_chunks'] == 0:
        print(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu audio cho video_id: {video_id}, b·ªè qua fusion analysis")
        return

    try:
        # Tr∆∞·ªõc khi ch·∫°y fusion, ƒë·∫£m b·∫£o c√°c ngu·ªìn d·ªØ li·ªáu ƒë·ªÅu ƒë∆∞·ª£c l·ªçc theo video_id c·ª• th·ªÉ
        print(f"üìä Chu·∫©n b·ªã ph√¢n t√≠ch c·∫£m x√∫c cho video_id: {video_id}")

        # Ch·∫°y fusion analysis v·ªõi video_id c·ª• th·ªÉ
        run_fusion_analysis(url_id=video_id)
        print(f"‚úÖ ƒê√£ ho√†n th√†nh fusion analysis cho video_id: {video_id}")

        # X√≥a video ƒë√£ x·ª≠ l√Ω kh·ªèi tracking ƒë·ªÉ tr√°nh x·ª≠ l√Ω l·∫∑p l·∫°i
        del video_data_tracking[video_id]

    except Exception as e:
        print(f"‚ùå L·ªói khi ch·∫°y fusion analysis cho {video_id}: {str(e)}")
        traceback.print_exc()


def cleanup_old_videos():
    """X√≥a c√°c video qu√° h·∫°n kh·ªèi tracking ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ"""
    current_time = time.time()
    expired_threshold = current_time - (MAX_WAIT_TIME * 3)  # Th·ªùi gian h·∫øt h·∫°n l√¢u h∆°n

    for video_id in list(video_data_tracking.keys()):
        if video_data_tracking[video_id]["last_update"] < expired_threshold:
            print(
                f"üßπ X√≥a video_id h·∫øt h·∫°n: {video_id} (kh√¥ng ho·∫°t ƒë·ªông trong {(current_time - video_data_tracking[video_id]['last_update']):.1f}s)")
            del video_data_tracking[video_id]


def run():
    """Consumer l·∫Øng nghe c√°c topic v√† trigger fusion khi m·ªôt video ƒë√£ ho√†n th√†nh x·ª≠ l√Ω"""
    print("‚ñ∂Ô∏è Kh·ªüi ƒë·ªông fusion consumer...")
    print(f"‚öôÔ∏è C·∫•u h√¨nh: MAX_WAIT_TIME={MAX_WAIT_TIME}s, CLEANUP_INTERVAL={CLEANUP_INTERVAL}s")

    # T·∫°o group_id v·ªõi prefix t·ª´ m√¥i tr∆∞·ªùng ho·∫∑c default
    group_id = f"{os.getenv('KAFKA_GROUP_ID', 'sentiment-group')}_fusion"

    consumer = KafkaConsumer(
        COMMENT_TOPIC, VIDEO_TOPIC, AUDIO_TOPIC,
        bootstrap_servers=CONFIG['kafka']['bootstrap_servers'],
        group_id=group_id,
        auto_offset_reset='latest',
        enable_auto_commit=True,
        value_deserializer=lambda m: m.decode('utf-8')
    )

    last_cleanup = time.time()

    try:
        print("üëÇ ƒêang l·∫Øng nghe c√°c topic Kafka...")

        while True:
            # Poll ƒë·ªÉ l·∫•y message t·ª´ Kafka v·ªõi timeout 1 gi√¢y
            message_pack = consumer.poll(timeout_ms=1000, max_records=10)

            # X·ª≠ l√Ω c√°c message nh·∫≠n ƒë∆∞·ª£c
            for topic_partition, messages in message_pack.items():
                for message in messages:
                    # X·ª≠ l√Ω message v√† l·∫•y video_id
                    video_id = process_message(message)

            # Ki·ªÉm tra video n√†o ƒë√£ ho√†n th√†nh c·∫£ hai lu·ªìng
            completed_videos = check_completed_videos()
            for video_id in completed_videos:
                # Ch·∫°y fusion analysis cho t·ª´ng video ƒë√£ ho√†n th√†nh
                run_fusion_for_video(video_id)

            # D·ªçn d·∫πp ƒë·ªãnh k·ª≥ ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
            current_time = time.time()
            if current_time - last_cleanup > CLEANUP_INTERVAL:
                cleanup_old_videos()
                last_cleanup = current_time

                # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng video ƒëang theo d√µi
                if video_data_tracking:
                    print(f"üìä ƒêang theo d√µi {len(video_data_tracking)} video_id")

    except KeyboardInterrupt:
        print("üõë D·ª´ng fusion consumer theo y√™u c·∫ßu ng∆∞·ªùi d√πng...")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c: {str(e)}")
        traceback.print_exc()
    finally:
        print("üëã ƒê√≥ng Kafka consumer...")
        consumer.close()

# import os
# import threading
# import time
# import json
# from kafka import KafkaConsumer
# from src.utils.fusion_utils import run_fusion_analysis
# from src.producer.config import CONFIG
# import traceback
#
# # Kafka topics ƒë·ªÉ l·∫Øng nghe
# COMMENT_TOPIC = "video_comments"
# VIDEO_TOPIC = "video_frames"
# AUDIO_TOPIC = "audio_stream"
#
# # Cache cho theo d√µi s·ªë l∆∞·ª£ng d·ªØ li·ªáu m·ªõi
# data_counters = {
#     "comments": 0,
#     "video_frames": 0,
#     "audio_chunks": 0
# }
#
# # Ng∆∞·ª°ng ƒë·ªÉ k√≠ch ho·∫°t ph√¢n t√≠ch fusion
# THRESHOLD = {
#     "comments": 0,
#     "video_frames": 5,
#     "audio_chunks": 1
# }
#
# # Flag ki·ªÉm so√°t tr·∫°ng th√°i fusion
# fusion_running = False
# fusion_last_run = 0
# MIN_INTERVAL = 60  # gi√¢y
#
# def should_run_fusion():
#     """Ki·ªÉm tra ƒëi·ªÅu ki·ªán ch·∫°y fusion analysis"""
#     global fusion_last_run
#     current_time = time.time()
#     if current_time - fusion_last_run < MIN_INTERVAL:
#         return False
#
#     if (data_counters["comments"] >= THRESHOLD["comments"] and
#         data_counters["video_frames"] >= THRESHOLD["video_frames"] and
#         data_counters["audio_chunks"] >= THRESHOLD["audio_chunks"]):
#         return True
#
#     return False
#
# def reset_counters():
#     """Reset b·ªô ƒë·∫øm"""
#     global data_counters
#     data_counters = {
#         "comments": 0,
#         "video_frames": 0,
#         "audio_chunks": 0
#     }
#
# def process_message(topic):
#     """TƒÉng b·ªô ƒë·∫øm theo topic"""
#     if topic == COMMENT_TOPIC:
#         data_counters["comments"] += 1
#     elif topic == VIDEO_TOPIC:
#         data_counters["video_frames"] += 1
#     elif topic == AUDIO_TOPIC:
#         data_counters["audio_chunks"] += 1
#
# def run():
#     """Consumer l·∫Øng nghe c√°c topic v√† trigger fusion khi ƒë·ªß d·ªØ li·ªáu"""
#     print("‚ñ∂Ô∏è Starting fusion consumer...")
#
#     group_id = f"{os.getenv('KAFKA_GROUP_ID', 'default-group')}_fusion"
#
#     consumer = KafkaConsumer(
#         COMMENT_TOPIC, VIDEO_TOPIC, AUDIO_TOPIC,
#         bootstrap_servers=CONFIG['kafka']['bootstrap_servers'],
#         group_id=group_id,
#         auto_offset_reset='latest',
#         enable_auto_commit=True,
#         value_deserializer=lambda m: m.decode('utf-8')
#     )
#
#     global fusion_running, fusion_last_run
#
#     try:
#         for message in consumer:
#             topic = message.topic
#             process_message(topic)
#
#             if not fusion_running and should_run_fusion():
#                 fusion_running = True
#                 print(f"üîÑ Running fusion analysis with new data: {data_counters}")
#
#                 try:
#                     run_fusion_analysis()
#                     fusion_last_run = time.time()
#                     reset_counters()
#                 except Exception as e:
#                     print(f"‚ùå Error running fusion analysis: {str(e)}")
#                     traceback.print_exc()
#                 finally:
#                     fusion_running = False
#
#     except KeyboardInterrupt:
#         print("üõë Stopping fusion consumer...")
#     finally:
#         consumer.close()
